// Generated by Dagger (https://dagger.dev).
package ru.brazhnik.voicetext.view.notepad;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import ru.brazhnik.voicetext.domain.interactor.DestroyUseCase;
import ru.brazhnik.voicetext.domain.interactor.GetRecordStateUseCase;
import ru.brazhnik.voicetext.domain.interactor.GetResultTextUseCase;
import ru.brazhnik.voicetext.domain.interactor.StartListeningUseCase;
import ru.brazhnik.voicetext.domain.interactor.StopListeningUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NotepadScreenViewModel_Factory implements Factory<NotepadScreenViewModel> {
  private final Provider<CoroutineDispatcher> dispatcherProvider;

  private final Provider<StartListeningUseCase> startListeningUseCaseProvider;

  private final Provider<StopListeningUseCase> stopListeningUseCaseProvider;

  private final Provider<GetRecordStateUseCase> getRecordStateUseCaseProvider;

  private final Provider<GetResultTextUseCase> getResultTextUseCaseProvider;

  private final Provider<DestroyUseCase> destroyUseCaseProvider;

  public NotepadScreenViewModel_Factory(Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<StartListeningUseCase> startListeningUseCaseProvider,
      Provider<StopListeningUseCase> stopListeningUseCaseProvider,
      Provider<GetRecordStateUseCase> getRecordStateUseCaseProvider,
      Provider<GetResultTextUseCase> getResultTextUseCaseProvider,
      Provider<DestroyUseCase> destroyUseCaseProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.startListeningUseCaseProvider = startListeningUseCaseProvider;
    this.stopListeningUseCaseProvider = stopListeningUseCaseProvider;
    this.getRecordStateUseCaseProvider = getRecordStateUseCaseProvider;
    this.getResultTextUseCaseProvider = getResultTextUseCaseProvider;
    this.destroyUseCaseProvider = destroyUseCaseProvider;
  }

  @Override
  public NotepadScreenViewModel get() {
    return newInstance(dispatcherProvider.get(), startListeningUseCaseProvider.get(), stopListeningUseCaseProvider.get(), getRecordStateUseCaseProvider.get(), getResultTextUseCaseProvider.get(), destroyUseCaseProvider.get());
  }

  public static NotepadScreenViewModel_Factory create(
      Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<StartListeningUseCase> startListeningUseCaseProvider,
      Provider<StopListeningUseCase> stopListeningUseCaseProvider,
      Provider<GetRecordStateUseCase> getRecordStateUseCaseProvider,
      Provider<GetResultTextUseCase> getResultTextUseCaseProvider,
      Provider<DestroyUseCase> destroyUseCaseProvider) {
    return new NotepadScreenViewModel_Factory(dispatcherProvider, startListeningUseCaseProvider, stopListeningUseCaseProvider, getRecordStateUseCaseProvider, getResultTextUseCaseProvider, destroyUseCaseProvider);
  }

  public static NotepadScreenViewModel newInstance(CoroutineDispatcher dispatcher,
      StartListeningUseCase startListeningUseCase, StopListeningUseCase stopListeningUseCase,
      GetRecordStateUseCase getRecordStateUseCase, GetResultTextUseCase getResultTextUseCase,
      DestroyUseCase destroyUseCase) {
    return new NotepadScreenViewModel(dispatcher, startListeningUseCase, stopListeningUseCase, getRecordStateUseCase, getResultTextUseCase, destroyUseCase);
  }
}
